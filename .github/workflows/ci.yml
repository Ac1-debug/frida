name: CI

on: push

env:
  FRIDA_COMPILER_MOD: subprojects/frida-core/src/compiler/go.mod
  ANDROID_NDK_VERSION: r25b

jobs:
  publish-prod:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - package-linux
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grab needed submodules
        run: python tools/ensure-submodules.py frida-gum frida-core frida-python frida-node
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro
          sudo npm install -g cloudflare-cli
      - name: Download release assets
        uses: actions/download-artifact@v4
        with:
          pattern: release-asset-*
          merge-multiple: true
          path: build/release-assets/
      - name: Download Node-API prebuilds for Linux/x86
        uses: actions/download-artifact@v4
        with:
          name: frida-node-linux-x86
          path: build/release-assets/
      - name: Download Node-API prebuilds for Linux/x86_64
        uses: actions/download-artifact@v4
        with:
          name: frida-node-linux-x86_64
          path: build/release-assets/
      - name: Package Cirrus CI artifacts
        run: .github/scripts/package-cirrus-ci-artifacts.sh ${{ github.sha }}
      - name: Rename release assets
        run: .github/scripts/rename-release-assets.sh
      - name: Publish release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          name: "Frida ${{ env.FRIDA_VERSION }}"
          body: "See https://frida.re/news/ for details."
          files: build/release-assets/*

  package-linux:
    if: startsWith(github.ref, 'refs/tags/')
    needs: frida-linux
    strategy:
      matrix:
        arch: [x86, x86_64, x86_64-musl, armhf, armhf-musl, armbe8, arm64, arm64be, arm64-musl, mips, mipsel, mips64, mips64el]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: frida-gum-devkit-linux-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: frida-gumjs-devkit-linux-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: frida-core-devkit-linux-${{ matrix.arch }}
      - name: Package frida-server
        uses: ./.github/actions/package-artifact-file
        with:
          name: frida-server-linux-${{ matrix.arch }}
      - name: Package frida-portal
        uses: ./.github/actions/package-artifact-file
        with:
          name: frida-portal-linux-${{ matrix.arch }}
      - name: Package frida-gadget
        uses: ./.github/actions/package-artifact-file
        with:
          name: frida-gadget-linux-${{ matrix.arch }}
      - name: Package frida-inject
        uses: ./.github/actions/package-artifact-file
        with:
          name: frida-inject-linux-${{ matrix.arch }}
      - name: Package QML bindings
        if: matrix.arch == 'x86_64'
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: frida-qml-linux-${{ matrix.arch }}

  frida-linux:
    needs: sdk-linux
    strategy:
      matrix:
        arch: [x86, x86_64, x86_64-musl, armhf, armhf-musl, armbe8, arm64, arm64be, arm64-musl, mips, mipsel, mips64, mips64el]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/frida/x-tools-linux-${{ matrix.arch }}:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grab frida-core
        run: python tools/ensure-submodules.py frida-core
      - name: Install Go toolchain
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.FRIDA_COMPILER_MOD }}
          cache-dependency-path: ${{ env.FRIDA_COMPILER_MOD }}
      - name: Configure qemu-user
        if: ${{ !startsWith(matrix.arch, 'x86') }}
        run: echo "FRIDA_QEMU_SYSROOT=/opt/x-tools/$XTOOLS_HOST/$XTOOLS_HOST/sysroot" >> $GITHUB_ENV
      - name: Prepare environment for installing Qt
        if: matrix.arch == 'x86_64'
        run: |
          apt-get update
          apt-get install -y sudo
          echo "PIP_BREAK_SYSTEM_PACKAGES=1" >> $GITHUB_ENV
      - name: Install Qt
        if: matrix.arch == 'x86_64'
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.7.0'
          cache: true
          setup-python: false
      - name: Configure
        run: >-
          ./configure
          "--prefix=$FRIDA_PREFIX"
          --host=$XTOOLS_HOST
          --enable-gadget
          --enable-server
          --enable-portal
          --enable-inject
          --enable-frida-python
          --
          -Dlibdir=lib
          -Dfrida_qml=${{ matrix.arch == 'x86_64' && 'enabled' || 'disabled' }}
          -Dfrida-gum:devkits=gum,gumjs
          -Dfrida-core:compiler_backend=${{ !(startsWith(matrix.arch, 'mips') || matrix.arch == 'armbe8' || matrix.arch == 'arm64be') && 'enabled' || 'disabled' }}
          -Dfrida-core:devkits=core
      - name: Compile
        run: make
      - name: Install
        run: make install
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v4
        with:
          name: frida-gum-devkit-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/lib/frida/devkits/gum/
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v4
        with:
          name: frida-gumjs-devkit-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/lib/frida/devkits/gumjs/
      - name: Upload Core devkit
        uses: actions/upload-artifact@v4
        with:
          name: frida-core-devkit-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/lib/frida/devkits/core/
      - name: Upload frida-server
        uses: actions/upload-artifact@v4
        with:
          name: frida-server-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/bin/frida-server
      - name: Upload frida-portal
        uses: actions/upload-artifact@v4
        with:
          name: frida-portal-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/bin/frida-portal
      - name: Upload frida-inject
        uses: actions/upload-artifact@v4
        with:
          name: frida-inject-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/bin/frida-inject
      - name: Upload 32-bit frida-gadget
        if: ${{ !contains(matrix.arch, '64') }}
        uses: actions/upload-artifact@v4
        with:
          name: frida-gadget-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/lib/frida/32/frida-gadget.so
      - name: Upload 64-bit frida-gadget
        if: ${{ contains(matrix.arch, '64') }}
        uses: actions/upload-artifact@v4
        with:
          name: frida-gadget-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/lib/frida/64/frida-gadget.so
      - name: Package Python bindings
        run: |
          export FRIDA_EXTENSION=$(find "$FRIDA_PREFIX" -name _frida.abi3.so)
          case ${{ matrix.arch }} in
            *-musl)
              py_oses=(musllinux_1_1)
              ;;
            x86*)
              py_oses=(manylinux_2_5 manylinux1)
              ;;
            arm*|ppc*|s390x)
              py_oses=(manylinux_2_17 manylinux2014)
              ;;
            *)
              py_oses=(manylinux_2_5)
              ;;
          esac
          frida_arch=$(echo "${{ matrix.arch }}" | cut -f1 -d"-")
          case $frida_arch in
            x86)
              py_arch=i686
              ;;
            armhf)
              py_arch=armv7l
              ;;
            arm64)
              py_arch=aarch64
              ;;
            *)
              py_arch=$frida_arch
              ;;
          esac
          cd subprojects/frida-python
          export _PYTHON_HOST_PLATFORM=linux-$py_arch
          for py_os in "${py_oses[@]}"; do
            echo "plat_name = ${py_os}_${py_arch}" >> setup.cfg
            pip wheel -w "$FRIDA_PREFIX/wheels" --no-deps .
            git checkout setup.cfg
          done
        shell: bash
      - name: Upload Python bindings
        uses: actions/upload-artifact@v4
        with:
          name: frida-python-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/wheels/*.whl
      - name: Build Node.js bindings
        if: ${{ !(startsWith(matrix.arch, 'mips') || endsWith(matrix.arch, '-musl') || matrix.arch == 'armbe8' || matrix.arch == 'arm64be') }}
        run: |
          installdir=$FRIDA_PREFIX/prebuilds
          export FRIDA_DEPS=$PWD/deps
          export PKG_CONFIG_PATH=$FRIDA_PREFIX/lib/pkgconfig
          python tools/ensure-submodules.py frida-node
          cd subprojects/frida-node
          npm version $FRIDA_VERSION
          ./configure \
              "--prefix=$FRIDA_PREFIX" \
              --host=$XTOOLS_HOST
          make prebuild
          mkdir "$installdir"
          cp build/*.tar.gz "$installdir"
        shell: bash
      - name: Upload Node.js bindings
        if: ${{ !(startsWith(matrix.arch, 'mips') || endsWith(matrix.arch, '-musl') || matrix.arch == 'armbe8' || matrix.arch == 'arm64be') }}
        uses: actions/upload-artifact@v4
        with:
          name: frida-node-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/prebuilds/*.tar.gz
      - name: Upload QML bindings
        if: matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: frida-qml-linux-${{ matrix.arch }}
          path: ${{ env.FRIDA_PREFIX }}/lib/qml/



  toolchain-linux:
    strategy:
      matrix:
        arch: [x86, x86_64, x86_64-musl, armhf, armhf-musl, armbe8, arm64, arm64be, arm64beilp32, arm64-musl]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/frida/x-tools-linux-${{ matrix.arch }}:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Roll toolchain
        run: releng/deps.py roll toolchain $XTOOLS_HOST

  sdk-linux:
    needs: toolchain-linux
    strategy:
      matrix:
        arch: [x86, x86_64, x86_64-musl, armhf, armhf-musl, armbe8, arm64, arm64be, arm64beilp32, arm64-musl, mips, mipsel, mips64, mips64el]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/frida/x-tools-linux-${{ matrix.arch }}:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set FRIDA_CAN_RUN_HOST_BINARIES
        if: ${{ matrix.arch == 'x86' }}
        run: echo "FRIDA_CAN_RUN_HOST_BINARIES=yes" >> $GITHUB_ENV
      - name: Configure qemu-user
        if: ${{ !startsWith(matrix.arch, 'x86') }}
        run: echo "FRIDA_QEMU_SYSROOT=/opt/x-tools/$XTOOLS_HOST/$XTOOLS_HOST/sysroot" >> $GITHUB_ENV
      - name: Roll SDK
        run: releng/deps.py roll sdk $XTOOLS_HOST --activate

